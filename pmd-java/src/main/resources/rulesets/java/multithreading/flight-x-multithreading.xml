<?xml version="1.0"?>

<ruleset name="multithreading"
         xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 https://pmd.sourceforge.io/ruleset_2_0_0.xsd">

    <description>
        Rules that flag issues when dealing with multiple threads of execution.
    </description>

    <rule name="AvoidThreadGroupRule"
          language="java"
          message="java.multithreading.AvoidThreadGroupRule.rule.msg"
          class="com.ctrip.flight.mobile.pmd.lang.java.rule.multithreading.AvoidThreadGroupRule">
        <description>java.multithreading.AvoidThreadGroupRule.rule.desc</description>
        <priority>3</priority>
        <properties>
            <property name="version" value="2.0"/>
            <property name="xpath">
                <value>
                    <![CDATA[
//AllocationExpression/ClassOrInterfaceType[pmd-java:typeIs('java.lang.ThreadGroup')]|
//PrimarySuffix[contains(@Image, 'getThreadGroup')]
]]>
                </value>
            </property>
        </properties>
        <example>
            <![CDATA[
public class Bar {
    void buz() {
        ThreadGroup tg = new ThreadGroup("My threadgroup");
        tg = new ThreadGroup(tg, "my thread group");
        tg = Thread.currentThread().getThreadGroup();
        tg = System.getSecurityManager().getThreadGroup();
    }
}
]]>
        </example>
    </rule>

    <rule name="DoubleCheckedLockingRule"
          language="java"
          since="1.04"
          message="java.multithreading.DoubleCheckedLockingRule.rule.msg"
          class="com.ctrip.flight.mobile.pmd.lang.java.rule.multithreading.DoubleCheckedLockingRule">
        <description>java.multithreading.DoubleCheckedLockingRule.rule.desc</description>
        <priority>1</priority>
        <example>
            <![CDATA[
public class Foo {
    /*volatile */ Object baz = null; // fix for Java5 and later: volatile
    Object bar() {
        if (baz == null) { // baz may be non-null yet not fully created
            synchronized(this) {
                if (baz == null) {
                    baz = new Object();
                }
              }
        }
        return baz;
    }
}
]]>
        </example>
    </rule>

    <!--<rule name="UnSynchronizedStaticFormatterRule"-->
          <!--language="java"-->
          <!--message="java.multithreading.UnSynchronizedStaticFormatterRule.rule.msg"-->
          <!--class="com.ctrip.flight.mobile.pmd.lang.java.rule.multithreading.UnSynchronizedStaticFormatterRule"-->
          <!--deprecated="true">-->
        <!--<description>java.multithreading.UnSynchronizedStaticFormatterRule.rule.desc</description>-->
        <!--<priority>3</priority>-->
        <!--<example>-->
            <!--<![CDATA[-->
<!--public class Foo {-->
    <!--private static final SimpleDateFormat sdf = new SimpleDateFormat();-->
    <!--void bar() {-->
        <!--sdf.format(); // poor, no thread-safety-->
    <!--}-->
    <!--void foo() {-->
        <!--synchronized (sdf) { // preferred-->
            <!--sdf.format();-->
        <!--}-->
    <!--}-->
<!--}-->
<!--]]>-->
        <!--</example>-->
    <!--</rule>-->
</ruleset>