<?xml version="1.0"?>

<ruleset name="customization"
         xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 https://pmd.sourceforge.io/ruleset_2_0_0.xsd">

    <description>customization rule</description>

    <rule name="StreamExpressionStyleRule"
          language="java"
          message="java.customization.StreamExpressionStyleRule.rule.msg"
          class="com.ctrip.flight.mobile.pmd.lang.java.rule.customization.StreamExpressionStyleRule">
        <description>java.customization.StreamExpressionStyleRule.rule.desc</description>
        <priority>3</priority>
        <example>
            <![CDATA[
public class Foo {
  public Foo() {
    // correct
    List<String> stringList = new ArrayList();
    List<String> filterList = stringList
            .stream()
            .filter(Objects::nonNull)
            .filter(x -> Objects.equals("1", x))
            .collect(Collectors.toList());

    filterList = stringList.stream()
            .filter(Objects::nonNull)
            .filter(x -> Objects.equals("1", x))
            .collect(Collectors.toList());

    // incorrect
    List<String> filterList = stringList.stream().filter(Objects::nonNull)
            .filter(x -> Objects.equals("1", x)).collect(Collectors.toList());


    // correct
    Mono<String> resultMono = Flux.fromIterable(iterable)
                .map(value -> {
                    // doSomething();
                    return Mono.just();
                })
                .flatMapSequential(x -> x)
                .collectList()
                .flatMap(states -> {
                    // doSomething();
                    return Mono.just();
                });

    // correct
    Mono<Boolean> monoResult = getMonoInfo()
                        .map(wrapper -> Objects.equals("test", wrapper));
    monoResult = getMonoInfo().map(wrapper -> Objects.equals("test", wrapper));
    String firstValue = Mono.just(new ArrayList<String>())
                    .flatMap(this::getMonoListInfo)
                    .map(x -> x.get(0))
                    .block();
    //correct
    String name = Optional.ofNullable(model)
                              .map(ModelClass::getName)
                              .orElse("");
    Optional<String> nameOptional = Optional.ofNullable(model);
    if(nameOptional.isPresent()) {
        name = nameOptional.get().getName();
    }

    //incorrect
    String name = Optional.ofNullable(model).map(ModelClass::getName).orElse("");
  }
}
]]>
        </example>
    </rule>

    <rule name="ConditionalTooLongNeedChangeLineRule"
          language="java"
          message="java.customization.ConditionalTooLongNeedChangeLineRule.rule.msg"
          class="com.ctrip.flight.mobile.pmd.lang.java.rule.customization.ConditionalTooLongNeedChangeLineRule">
        <description>java.customization.ConditionalTooLongNeedChangeLineRule.rule.desc</description>
        <priority>3</priority>
        <properties>
            <property name="conditionalLengthLimit" value="80"/>
        </properties>
        <example>
            <![CDATA[
public class Foo {
  public Foo(List<String> stringList, String input) {
    // incorrect conditional expression too long(over 80 literals) need change line
    boolean isTest = Objects.nonNull(input) && StringList.contains("conditionalTooLongNeedChangeLine") && input.equals("test")


    // correct（the conditional symbol must be change line）
    boolean isTest = Objects.nonNull(input)
                        && input.equals("test")
                        && StringList.contains("conditionalTooLongNeedChangeLine");
    // incorrect
    if(Objects.nonNull(input) && StringList.contains("conditionalTooLongNeedChangeLine") && input.equals("test")) {
        // doSomething();
    }

    // correct
    if(Objects.nonNull(input)
        && input.equals("test")
        && StringList.contains("conditionalTooLongNeedChangeLine")) {
        // doSomething();
    }
  }
}
]]>
        </example>
    </rule>

    <rule name="AvoidComplexConditionalRule"
          language="java"
          message="java.customization.AvoidComplexConditionalRule.rule.msg"
          class="com.ctrip.flight.mobile.pmd.lang.java.rule.customization.AvoidComplexConditionalRule">
        <description>java.customization.AvoidComplexConditionalRule.rule.desc</description>
        <priority>3</priority>
        <example>
            <![CDATA[
public class Foo {
  public Foo(List<String> stringList, String input) {
    // incorrect  complex condition
    boolean isTest = (Objects.nonNull(input) || input.equals("test"))
                && StringList.contains("conditionalTooLongNeedChangeLine");

    boolean isTest2 = Objects.nonNull(input)
                        && input.equals("test")
                        || StringList.stream().anyMatch(x-> Objects.equals(x, "1"));

    boolean isTest3 = StringList.stream().anyMatch(x-> !Objects.equals(x, "3")
            && (Objects.equals(x, "1") || Objects.equals(x, "2")));

    boolean isTest4 = !isOk() || input.equals("test");

    boolean isTest5 = !isOk() && input.equals("test");

    boolean isTest6 = isOk()^isOk2() && input.equals("test");

    boolean isTest7 = !isOk()^isOk2();

    boolean isTest8 = (a | b) == c && isOk2();

    boolean isTest9 = (a & b) == c && isOk2();

    boolean isTest10 = (a >> 2) == c && isOk2();

    boolean isTest11 = (a << 2) == c && isOk2();

    boolean isTest12 = (a >>> 2) == c && isOk2();

    boolean isTest13 = ~a == b && isOk2();

    // correct
    boolean isCondition1 = Objects.nonNull(input) || input.equals("test");
    boolean isTest1 = condition1
            && StringList.contains("conditionalTooLongNeedChangeLine");

    boolean isCondition21 = Objects.nonNull(input) && input.equals("test");
    boolean isCondition22 = StringList.stream().anyMatch(x-> Objects.equals(x, "1"));
    boolean isTest2 = isCondition21 || isCondition22;

    boolean isTest3 = StringList.stream().anyMatch(this::isCondition3);

    private boolean isCondition3(String x){
        boolean isCondition31 = Objects.equals(x, "1") || Objects.equals(x, "2");
        return !Objects.equals(x, "3") && isCondition31;
    }
  }
}
]]>
        </example>
    </rule>


    <rule name="StreamExpressionTooLongRule"
          language="java"
          message="java.customization.StreamExpressionTooLongRule.rule.msg"
          class="com.ctrip.flight.mobile.pmd.lang.java.rule.customization.StreamExpressionTooLongRule">
        <description>java.customization.StreamExpressionTooLongRule.rule.desc</description>
        <priority>3</priority>
        <properties>
            <property name="maxLine" value="30"/>
        </properties>
        <example>
            <![CDATA[
public class Foo {
    public Foo() {
        // recommend
        List<String> stringList = new ArrayList();
        List<String> filterList = stringList
                .stream()
                .filter(Objects::nonNull)
                .filter(x -> Objects.equals("1", x))
                .collect(Collectors.toList());

        // not recommend
        List<String> stringList = new ArrayList();
        // over than 30 line(default threshold is 30),no statistical comments
        List<String> filterList = stringList
                .stream()
                .filter(Objects::nonNull)
                .filter(x -> Objects.equals("1", x))
                .map(x-> {
                    // build TestModel(no total)
                    TestModel model = new TestModel();
                    model.setXXX(x);
                    ...
                    ...
                    ...
                    ...
                    return model;
                })
                .collect(Collectors.toList());
    }
}
]]>
        </example>
    </rule>

    <rule name="AvoidStreamExpressionInIfStmtsRule"
          language="java"
          message="java.customization.AvoidStreamExpressionInIfStmtsRule.rule.msg"
          class="com.ctrip.flight.mobile.pmd.lang.java.rule.customization.AvoidStreamExpressionInIfStmtsRule"
          typeResolution="true">
        <description>java.customization.AvoidStreamExpressionInIfStmtsRule.rule.desc</description>
        <priority>3</priority>
        <example>
            <![CDATA[
public class Foo {
    public Foo(List<String> stringList, String input) {

        // not recommend
        if(!stringList.isEmpty()
            && stringList.stream().anyMatch(x -> Objects.equals("1", x))) {
            doSomething();
        }

        // not recommend
        if(Optional.ofNullable(input).orElse("").equals("test")) {
            doSomething();
        }

        // it's ok
        Optional<ModelClass> optional = Optional.ofNullable(model);
        if(optional.isPresent()) {
        }
        if(optional.get()!=null || optional.get().getXXX()!=null) {
        }
    }
}
]]>
        </example>
    </rule>


    <rule name="UndefinedMagicConstantRule"
          language="java"
          message="java.customization.UndefinedMagicConstantRule.rule.msg"
          class="com.ctrip.flight.mobile.pmd.lang.java.rule.customization.UndefinedMagicConstantRule">
        <description>java.customization.UndefinedMagicConstantRule.rule.desc</description>
        <priority>3</priority>
        <properties>
            <property name="literalWhiteList" value="1|0|-1|0.0|1.0|0L|1L"/>
        </properties>
        <example>
            <![CDATA[
    // Magic values, except for predefined, are forbidden in coding.
    if ("ctrip".equals(key)) {
            //...
    }
    // correct example
    String KEY_PRE = "ctrip";
    if (KEY_PRE.equals(key)) {
            //...
    }
         ]]>
        </example>
    </rule>

    <rule name="AvoidIfStmtsInSwitchStmtsRule"
          language="java"
          message="java.customization.AvoidIfStmtsInSwitchStmtsRule.rule.msg"
          class="com.ctrip.flight.mobile.pmd.lang.java.rule.customization.AvoidIfStmtsInSwitchStmtsRule">
        <description>java.customization.AvoidIfStmtsInSwitchStmtsRule.rule.desc</description>
        <priority>3</priority>
        <example>
            <![CDATA[
    public class Foo {
        public Foo(InputModel inputModel) {
            switch (inputModel.getTitle()) {
                case "Test1":
                    // incorrect
                    if (StringUtils.isNotEmpty(inputModel.getContent())) {
                        //doSomething()
                    } else {
                        //doSomething()
                    }
                    break;
                case "Unit1":
                    // incorrect
                    if (Objects.equals(inputModel.getContent(), "UnitContent")) {
                        //doSomething()
                    } else {
                        //doSomething()
                    }
                    break;
                 default:
                     //doSomething()
            }
        }
    }

         ]]>
        </example>
    </rule>

    <rule name="AvoidStreamExpressionInStreamExpressionRule"
          language="java"
          message="java.customization.AvoidStreamExpressionInStreamExpressionRule.rule.msg"
          class="com.ctrip.flight.mobile.pmd.lang.java.rule.customization.AvoidStreamExpressionInStreamExpressionRule">
        <description>java.customization.AvoidStreamExpressionInStreamExpressionRule.rule.desc</description>
        <priority>3</priority>
        <properties>
            <property name="streamExpressionLimitNum" value="0"/>
        </properties>
        <example>
            <![CDATA[
public class Foo {
  public Foo() {
    // correct
    List<String> stringList = new ArrayList();
    List<String> filterList = stringList
            .stream()
            .filter(Objects::nonNull)
            .filter(x -> Objects.equals("1", x))
            .collect(Collectors.toList());

    // incorrect
    List<String> filterList = stringList
            .stream()
            .filter(Objects::nonNull)
            // stream expression contain stream expression
            .filter(x -> Optional.ofNullable(x).orElse("").equals("1"))
            .collect(Collectors.toList());

    // incorrect
    InnerClass innerClass = getInnerClass();
    List<InnerClass2> filterList = innerClass.getInnerClass2List()
            .stream()
            .filter(Objects::nonNull)
            // stream expression contain stream expression
            .filter(x -> x.getStringList().stream().anyMatch(j -> Objects.equals(j, "1")))
            .collect(Collectors.toList());

    // correct
    boolean result = innerClassList.stream()
        .filter(Objects::nonNull)
        .map(InnerClass::getExtensions)
        .flatMap(Collection::stream)
        .anyMatch(x -> Objects.equals("1", x));
    // incorrect
    boolean result = innerClassList.stream()
        .filter(Objects::nonNull)
        // stream expression contain stream expression
        .flatMap(x -> x.getExtensions().stream())
        .anyMatch(x -> Objects.equals("1", x));
  }
}
]]>
        </example>
    </rule>
    <rule name="GuardClausesRule"
          language="java"
          message="java.customization.GuardClausesRule.rule.msg"
          class="com.ctrip.flight.mobile.pmd.lang.java.rule.customization.GuardClausesRule">
        <description>java.customization.GuardClausesRule.rule.desc</description>
        <priority>3</priority>
        <example>
            <![CDATA[
public class Foo {
  public String bar() {
    // incorrect
    // returnStatement complexity < thenStatement complexity
    if(isOk()){
        doSomething(); // thenStatement complexity+1
        return "ok"; // thenStatement complexity+1
    }
    // returnStatement complexity=1
    return "not ok"; // or throw new Exception("not ok");

    // elseStatement complexity < thenStatement complexity
    if(isOk()){
        doSomething();
        return "ok";
    } else {
        return "not ok";// or throw new Exception("not ok");
    }

    // correct
    if(!isOk()){
        return "not ok";// or throw new Exception("not ok");
    }

    doSomething();
    return "ok";

    // correct
    if(isOk()){
       doSomething();
       return "ok";
    } else {
       doSomething();
       return "not ok";// or throw new Exception("not ok");
    }

    // correct
    // returnStatement complexity > thenStatement complexity
    if(isOk()){
       doSomething(); // thenStatement complexity+1
       return "ok"; // thenStatement complexity+1
    }
    // returnStatement complexity=4
    return list.stream()
               .filter(x->Objects.equals(x,"1"))
               .findFirst()
               .orElse("");
  }
}
]]>
        </example>
    </rule>

    <rule name="CollectorsToMapUnUseThirdParamRule"
          language="java"
          message="java.customization.CollectorsToMapUnUseThirdParamRule.rule.msg"
          class="com.ctrip.flight.mobile.pmd.lang.java.rule.customization.CollectorsToMapUnUseThirdParamRule">
        <description>java.customization.CollectorsToMapUnUseThirdParamRule.rule.desc</description>
        <priority>3</priority>
        <example>
            <![CDATA[
public class Foo {
    // correct
    private Map<String, String> convertExtensionOptions(List<KeyValuePairType> source) {
        return source.stream()
                .filter(Objects::nonNull)
                .filter(keyValue -> StringUtils.hasText(keyValue.getKey())
                    && Objects.nonNull(keyValue.getValue()))
                .collect(Collectors.toMap(KeyValuePairType::getKey, KeyValuePairType::getValue, (key1, key2) -> key1));
                //.collect(Collectors.toConcurrentMap(KeyValuePairType::getKey, KeyValuePairType::getValue, (key1, key2) -> key1));
    }

    // incorrect
    private Map<String, String> convertExtensionOptions(List<KeyValuePairType> source) {
        return source.stream()
                .filter(Objects::nonNull)
                .filter(keyValue -> StringUtils.hasText(keyValue.getKey())
                    && Objects.nonNull(keyValue.getValue()))
                .collect(Collectors.toMap(KeyValuePairType::getKey, KeyValuePairType::getValue));
    }
}
]]>
        </example>
    </rule>

    <!--<rule name="AvoidOptionalExpressionToStreamRule"-->
    <!--language="java"-->
    <!--message="java.customization.AvoidOptionalExpressionToStreamRule.rule.msg"-->
    <!--class="com.ctrip.flight.mobile.pmd.lang.java.rule.customization.AvoidOptionalExpressionToStreamRule">-->
    <!--<description>java.customization.AvoidOptionalExpressionToStreamRule.rule.desc</description>-->
    <!--<priority>3</priority>-->
    <!--<example>-->
    <!--<![CDATA[-->
    <!--public class Foo {-->
    <!--// correct-->
    <!--public void foo2() {-->
    <!--List<String> tempList = Optional.ofNullable(list)-->
    <!--.orElse(new ArrayList())-->
    <!--List<String> filterList = tempList.stream()-->
    <!--.filter(Objects::nonNull)-->
    <!--.filter(x -> Objects.equals("1",x))-->
    <!--.collect(Collectors.toList());-->
    <!--}-->

    <!--// incorrect-->
    <!--public void foo2() {-->
    <!--List<String> filterList = Optional.ofNullable(list)-->
    <!--.orElse(new ArrayList())-->
    <!--.stream()-->
    <!--.filter(Objects::nonNull)-->
    <!--.filter(x -> Objects.equals("1",x))-->
    <!--.collect(Collectors.toList());-->
    <!--}-->
    <!--}-->
    <!--]]>-->
    <!--</example>-->
    <!--</rule>-->

    <rule name="AvoidTooManyConditionRule"
          language="java"
          message="java.customization.AvoidTooManyConditionRule.rule.msg"
          class="com.ctrip.flight.mobile.pmd.lang.java.rule.customization.AvoidTooManyConditionRule">
        <description>java.customization.AvoidTooManyConditionRule.rule.desc</description>
        <priority>3</priority>
        <properties>
            <property name="conditionLimitedNum" value="4"></property>
        </properties>
        <example>
            <![CDATA[
public class Foo {
    // incorrect too many condition
    public void foo2() {
        if(a || b || c || d || e){
            // doSomething()
        }

        // too many condition
        List<String> filterList = list.stream()
            .filer(x-> x==1 || x==2 || x==3 || x==4 || x==5)
            .collect(Collectors.toList());

        // too many condition
        boolean result = a || b || c || d || e;
    }

    // correct
    public void foo2() {
        if(a || b || c || d){
            // doSomething()
        }

        List<String> filterList = list.stream()
            .filer(x-> x==1 || x==2 || x==3 || x==4)
            .collect(Collectors.toList());

        boolean result = a || b || c || d;
    }
}
]]>
        </example>
    </rule>

    <rule name="AvoidUseComplexStreamExpressionInSetMethodRule"
          language="java"
          message="java.customization.AvoidUseComplexStreamExpressionInSetMethodRule.rule.msg"
          class="com.ctrip.flight.mobile.pmd.lang.java.rule.customization.AvoidUseComplexStreamExpressionInSetMethodRule">
        <description>java.customization.AvoidUseComplexStreamExpressionInSetMethodRule.rule.desc</description>
        <priority>3</priority>
        <properties>
            <property name="startWithMethodName" value="set"></property>
            <property name="complexStreamLayerNum" value="1"></property>
        </properties>
        <example>
            <![CDATA[
public class Foo {
    // incorrect set's formal param contain stream expression
    public void foo2(List<String> nameList) {
        ModelClass model = new ModelClass();
        model.setName(nameList.stream()
                              .filter(Objects::nonNull)
                              .findFirst()
                              .orElse(""));
        // this rule is not violate,but violate in StreamExpressionStyleRule
        model.setName(nameList.stream().filter(Objects::nonNull).findFirst().orElse(""));
    }

    // correct
    public void foo2(List<String> nameList, Mono<String> monoInfo) {
        ModelClass model = new ModelClass();
        String name = nameList.stream()
                              .filter(Objects::nonNull)
                              .findFirst()
                              .orElse("");
        model.setName(name);
        model.setMonoInfo(monoInfo);

        Optional<IDCardExtType> idCardExtType = travelInfo.getIdCardList().stream().findFirst();
        if(idCardExtType.isPresent()){
            // it's ok
            travelerInfo.setCardRefID(idCardExtType.get().getReferenceID());
        }
    }
}
]]>
        </example>
    </rule>

    <rule name="TernaryChangeLineRule"
          language="java"
          message="java.customization.TernaryChangeLineRule.rule.msg"
          class="com.ctrip.flight.mobile.pmd.lang.java.rule.customization.TernaryChangeLineRule">
        <description>java.customization.TernaryChangeLineRule.rule.desc</description>
        <priority>3</priority>
        <example>
            <![CDATA[
public class Foo {
    // incorrect
    void foo() {
        String result = isOk() ? "T"
                               : "F";
        String result2 = isOk()
                               ? "T" : "F";

        String value = Objects.equals(model.getName(),"test")
                        ? "TestName" : "RealName";
    }

    // correct
    void foo() {
        String result = isOk() ? "T" : "F";
        String value = Objects.equals(model.getName(),"test")
                        ? "TestName"
                        : "RealName";
    }
}
]]>
        </example>
    </rule>

    <rule name="AvoidTernaryNestedTernaryRule"
          language="java"
          message="java.customization.AvoidTernaryNestedTernaryRule.rule.msg"
          class="com.ctrip.flight.mobile.pmd.lang.java.rule.customization.AvoidTernaryNestedTernaryRule">
        <description>java.customization.AvoidTernaryNestedTernaryRule.rule.desc</description>
        <priority>3</priority>
        <example>
            <![CDATA[
public class Foo {
    // incorrect
    void foo() {
        String result = isOk() ? "T" : condition == 2 ? "F" : "T";
        String value = Objects.equals(model.getName(),"test")
                                ? "TestName"
                                : Objects.equals(model.getName(),"trip")
                                    ? "TripName"
                                    : "RealName";
    }

    // correct
    void foo() {
        String conditionResult = condition == 2 ? "F" : "T";
        String result = isOk() ? "T" : conditionResult;

        String tripName = Objects.equals(name,"trip") ? "TripName" : "RealName";
        String value = Objects.equals(model.getName(),"test")
                        ? "TestName"
                        : tripName;
    }
}
]]>
        </example>
    </rule>

    <rule name="AvoidYodaConditionRule"
          language="java"
          message="java.customization.AvoidYodaConditionRule.rule.msg"
          class="com.ctrip.flight.mobile.pmd.lang.java.rule.customization.AvoidYodaConditionRule">
        <description>java.customization.AvoidYodaConditionRule.rule.desc</description>
        <priority>3</priority>
        <example>
            <![CDATA[
public class Foo {
    // incorrect
    void foo() {
        String result = null == value ? "F" : "T";
        if(2 != value) {

        }
        if(null == model.getA()){
        }
    }

    // correct
    void foo() {
        String result = value == null ? "F" : "T";
        if(value != 2) {

        }
        if(model.getA() == null){
        }
    }
}
]]>
        </example>
    </rule>

    <rule name="AvoidUseSetFuncInGetMethodRule"
          language="java"
          message="java.customization.AvoidUseSetFuncInGetMethodRule.rule.msg"
          class="com.ctrip.flight.mobile.pmd.lang.java.rule.customization.AvoidUseSetFuncInGetMethodRule">
        <description>java.customization.AvoidUseSetFuncInGetMethodRule.rule.desc</description>
        <priority>3</priority>
        <properties>
            <property name="startWithMethodName" value="get"></property>
            <property name="forbiddenStartWithFuncName" value="set"></property>
        </properties>
        <example>
            <![CDATA[
public class Foo {
        // incorrect
        public OrderInfoModel getOrderInfo() {
                doSomething();
                orderInfoModel.setName("name"); // incorrect
                orderInfoModel.setValue("value");// incorrect
                if(isOk()){
                    orderInfoModel.setCondition(true);// incorrect
                }
                return orderInfoModel;
        }

        // incorrect
        public List<OrderInfoModel> getOrderInfo() {
                doSomething();
                return list.stream()
                           .filter(Objects::nonNull)
                           .map(model->{
                                OrderInfoModel orderInfo = new OrderInfoModel();
                                orderInfo.setName(model.getName()); // incorrect
                                orderInfo.setValue(model.getValue()); // incorrect
                                return orderInfo;
                           })
                           .collect(Collectors.toList());
        }

        // correct
        public OrderInfoModel getOrderInfo() {
              doSomething();
              return buildOrderInfoModel();
        }

        private OrderInfoModel buildOrderInfoModel(){
               orderInfoModel.setName("name");
               orderInfoModel.setValue("value");
               if(isOk()){
                     orderInfoModel.setCondition(true);
               }
               return orderInfoModel;
        }

        // correct
        public OrderInfoModel getOrderInfo() {
              doSomething();
              OrderInfoModel orderInfoModel = new OrderInfoModel();
              setOrderInfoModel(orderInfoModel);
              return orderInfoModel;
        }
}
]]>
        </example>
    </rule>

    <rule name="AvoidGetEnumUseForStatementRule"
          language="java"
          message="java.customization.AvoidGetEnumUseForStatementRule.rule.msg"
          class="com.ctrip.flight.mobile.pmd.lang.java.rule.customization.AvoidGetEnumUseForStatementRule">
        <description>java.customization.AvoidGetEnumUseForStatementRule.rule.desc</description>
        <priority>3</priority>
        <example>
            <![CDATA[
public enum ColorEnum {
    NA(0),
    RED(1),
    BLUE(2),
    GREEN(3);

    private int value;

    ColorEnum(int value) {
        this.value = value;
    }

    public int getValue() {
        return this.value;
    }

    // incorrect
    public static ColorEnum valueOf(int value) {
        return Arrays.stream(ColorEnum.values())
                .filter(x -> x.getValue() == value)
                .findAny()
                .orElse(ColorEnum.NA);
    }
    // incorrect
    public static ColorEnum findByValue(int value) {
        for(ColorEnum colorEnum : ColorEnum.values) {
            if (colorEnum.getValue() == value) {
                return colorEnum;
            }
        }
        return ColorEnum.NA;
    }

    // suggest
    private static final Map<Integer, ColorEnum> VALUE_MAP = Collections.unmodifiableMap(
            Arrays.stream(ColorEnum.values())
                  .collect(Collectors.toMap(ColorEnum::getValue, Function.identity(), (k1, k2) -> k1)));

    public static ColorEnum valueOf(int value) {
        return VALUE_MAP.getOrDefault(value, ColorEnum.NA);
    }
}
]]>
        </example>
    </rule>

    <rule name="AvoidUseUnSynchronizedFormatRule"
          language="java"
          message="java.customization.AvoidUseUnSynchronizedFormatRule.rule.msg"
          class="com.ctrip.flight.mobile.pmd.lang.java.rule.customization.AvoidUseUnSynchronizedFormatRule">
        <description>java.customization.AvoidUseUnSynchronizedFormatRule.rule.desc</description>
        <priority>3</priority>
        <example>
            <![CDATA[
public class Foo {
        // incorrect
        private static final SimpleDateFormat sdf = new SimpleDateFormat();
        private static final DecimalFormat decimalFormat = new DecimalFormat();
        private static final DateFormat dateFormat = new DateFormat();
        private static final MessageFormat messageFormat = new MessageFormat();
        private static final Object lock = new Object();
        void foo() {
            sdf.format();
            sdf.parse();
            decimalFormat.format();
            dateFormat.format();
            messageFormat.format();
        }

        // correct
        void foo() {
            synchronized (lock) { // preferred
                sdf.format();
                sdf.parse();
                decimalFormat.format();
                dateFormat.format();
                messageFormat.format();
            }
        }

        // correct but use local variable no good
        void foo() {
            SimpleDateFormat sdf = new SimpleDateFormat();
            sdf.format();
            sdf.parse();
        }

        // suggest use apache FastDateFormat
        private static final FastDateFormat format = FastDateFormat.getInstance();
        void foo() {
            format.format();
            format.parse();
        }
    }
]]>
        </example>
    </rule>

    <rule name="AvoidOperateExternalVariInStreamForeachStmtsRule"
          language="java"
          message="java.customization.AvoidOperateExternalVariInStreamForeachStmtsRule.rule.msg"
          class="com.ctrip.flight.mobile.pmd.lang.java.rule.customization.AvoidOperateExternalVariInStreamForeachStmtsRule">
        <description>java.customization.AvoidOperateExternalVariInStreamForeachStmtsRule.rule.desc</description>
        <priority>3</priority>
        <example>
            <![CDATA[
    public class Foo {
        // incorrect
        Map<String, String> map = new HashMap<>();
        List<String> newList = new ArrayList<>();

        void foo(ModelClass model) {
            stringList.stream().foreach(x -> {
                if (StringUtils.isNotEmpty(x)) {
                    map.put(x, x); // incorrect
                    newList.add(x); // incorrect
                    model.setName(x); // incorrect
                }
            });
        }

        //correct
        void foo(ModelClass model) {
          newList.addAll(stringList.stream()
                                   .filter(StringUtils::isNotEmpty)
                                   .collect(Collectors.toList()));
          map = stringList.stream()
                          .filter(StringUtils::isNotEmpty)
                          .collect(Collectors.toMap(x, x, (k1, k2) -> k1));
          for(String x : stringList){
              model.setName(x);
          }
        }
    }
]]>
        </example>
    </rule>

    <rule name="NarrativeParagraphRule"
          language="java"
          message="java.customization.NarrativeParagraphRule.rule.msg"
          class="com.ctrip.flight.mobile.pmd.lang.java.rule.customization.NarrativeParagraphRule">
        <description>java.customization.NarrativeParagraphRule.rule.desc</description>
        <priority>3</priority>
        <properties>
            <property name="paragraphLine" value="10"></property>
        </properties>
        <example>
            <![CDATA[
    public class Foo {

        // correct
        void buildModelInfo() {
            // over than 10 line need add comment
            // add model basic info
            ModelClass model = new ModelClass();
            model.setName("");
            .....
            model.desc("");

            //add subModel info
            SubModel subModel = new SubModel();
            subModel.setKey("");
            subModel.setValue("");
            model.setSubModel(subModel);

            // less than 10 line unnecessary add comment，but can use empty paragraph
            ExtraInfo extraInfo = new ExtraInfo();
            extraInfo.setType(1);
            extraInfo.setDesc("");
            model.setExtraInfo(extraInfo);
        }

        //incorrect over than 10 line no comment
        void buildModelInfo2(ModelClass model) {
            ModelClass model = new ModelClass();
            model.setName("");
            .....
            model.desc("");
            SubModel subModel = new SubModel();
            subModel.setKey("");
            subModel.setValue("");
            model.setSubModel(subModel);
            ExtraInfo extraInfo = new ExtraInfo();
            extraInfo.setType(1);
            extraInfo.setDesc("");
            model.setExtraInfo(extraInfo);
        }
    }
]]>
        </example>
    </rule>
</ruleset>