java.best.practices.AbstractClassWithoutAbstractMethod.rule.msg=抽象类没有抽象方法
java.best.practices.AbstractClassWithoutAbstractMethodRule.violation.msg=抽象类%s没有抽象方法
java.best.practices.AbstractClassWithoutAbstractMethodRule.rule.desc=抽象类不包含任何抽象方法。抽象类意味着不完整的实现，\
  该实现将由实现抽象方法的子类来完成。如果该类仅用作基类（不直接实例化），则可以提供受保护的构造函数以防止直接实例化。

java.best.practices.AvoidReassigningCatchVariables.rule.msg=避免重新分配catch的异常变量
java.best.practices.AvoidReassigningCatchVariablesRule.violation.msg=避免重新分配catch的异常变量''%s''
java.best.practices.AvoidReassigningCatchVariables.rule.desc=应避免重新分配catch语句中捕获的异常变量，因为：1) \
  如果需要，可以轻松添加多重catch并且代码仍然可以编译。2) 遵循最小意外原则，我们希望确保catch语句中捕获的变量始终是try块中抛出的变量

java.best.practices.AvoidReassigningLoopVariablesRule.rule.msg=避免重新分配循环变量
java.best.practices.AvoidReassigningLoopVariablesRule.violation.msg=避免重新分配循环变量''%s''
java.best.practices.AvoidReassigningLoopVariablesRule.rule.desc=重新分配循环变量可能会导致难以发现的错误。

java.best.practices.AvoidReassigningParametersRule.rule.msg=避免重新分配参数
java.best.practices.AvoidReassigningParametersRule.violation.msg=避免重新分配参数''%s''
java.best.practices.AvoidReassigningParametersRule.rule.desc=不建议方法或构造函数对传入的参数重新分配值，因为这会使代码更\
  难以理解。阅读代码时通常假设参数值不会改变，因此赋值违反了最少意外/惊讶原则。请改用临时局部变量。

java.best.practices.AvoidStringBufferFieldRule.rule.msg=避免StringBuffer/StringBuilders字段保存在具有长生命周期的对象中
java.best.practices.AvoidStringBufferFieldRule.violation.msg=避免%s字段保存在具有长生命周期的对象中
java.best.practices.AvoidStringBufferFieldRule.rule.desc=StringBuffers/StringBuilders可以显着增长，因此如果保存在具有长\
  生命周期的对象中，可能会成为内存泄漏的根源

java.best.practices.ConstantInterfaceRule.rule.msg=避免在接口中定义常量
java.best.practices.ConstantInterfaceRule.violation.msg=避免在接口中定义常量
java.best.practices.ConstantInterfaceRule.rule.desc=在接口中使用常量是一种不好的做法。接口定义类型，常量是更好地放置在类\
  或枚举中的实现细节。请参阅Effective Java 的“仅使用接口来定义类型”

java.best.practices.DefaultLabelNotLastInSwitchStmtRule.rule.msg=switch语句最后一个标签应该是default
java.best.practices.DefaultLabelNotLastInSwitchStmtRule.violation.msg=switch语句最后一个标签应该是default
java.best.practices.DefaultLabelNotLastInSwitchStmtRule.rule.desc=按照约定，default标签应该是switch语句中的最后一个标签。

java.best.practices.DoubleBraceInitializationRule.rule.msg=避免用双大括号初始化
java.best.practices.DoubleBraceInitializationRule.violation.msg=避免用双大括号初始化
java.best.practices.DoubleBraceInitializationRule.rule.desc=双括号初始化是一种简洁地初始化例如集合的模式。但它隐式生成一个新的\
  .class文件，并且该对象持有对封闭对象的强引用。出于这些原因，最好正常初始化对象，即使它很冗长。

java.best.practices.ForLoopVariableCountRule.rule.msg=For循环变量计数
java.best.practices.ForLoopVariableCountRule.violation.msg=For循环变量计数
java.best.practices.ForLoopVariableCountRule.rule.desc=在“for”循环中包含大量控制变量使得更难看出循环迭代的值范围。默认情况下，仅允许仅包含一个变量的常规“for”循环。

java.best.practices.JUnitTestsShouldIncludeAssertRule.rule.msg=JUnit测试应该包含断言
java.best.practices.JUnitTestsShouldIncludeAssertRule.violation.msg=JUnit测试应该包含断言
java.best.practices.JUnitTestsShouldIncludeAssertRule.rule.desc=JUnit测试应至少包含一个断言。这使得测试更加健壮。

java.best.practices.MethodReturnsInternalArrayRule.rule.msg=避免方法返回内部数组
java.best.practices.MethodReturnsInternalArrayRule.violation.msg=避免方法返回内部数组''%s''
java.best.practices.MethodReturnsInternalArrayRule.rule.desc=将内部数组暴露给调用者违反了对象封装，因为可以在拥有它的对象之外删除或替换元素。返回数组的副本更安全

java.best.practices.MissingOverrideRule.rule.msg=重载方法缺失Override
java.best.practices.MissingOverrideRule.violation.msg=重载方法''%s''缺失Override
java.best.practices.MissingOverrideRule.rule.desc=使用@Override注解重写的方法可确保在编译时该方法确实重写方法，这有助于重构并阐明意图。

java.best.practices.PrimitiveWrapperInstantiationRule.rule.msg=重载方法缺失Override
java.best.practices.PrimitiveWrapperInstantiationRule.violation.msg=Do not use `new %s(...)`, prefer `%s.valueOf(...)`
java.best.practices.PrimitiveWrapperInstantiationRule.Boolean.violation.msg=Do not use `%s`, prefer `%s`
java.best.practices.PrimitiveWrapperInstantiationRule.rule.desc=使用@Override注解重写的方法可确保在编译时该方法确实重写方法，这有助于重构并阐明意图。

java.best.practices.UnusedFormalParameterRule.rule.msg=未使用的参数
java.best.practices.UnusedFormalParameterRule.Method.violation.msg=私有方法有未使用的参数''%s''
java.best.practices.UnusedFormalParameterRule.Constructor.violation.msg=构造方法有未使用的参数''%s''
java.best.practices.UnusedFormalParameterRule.rule.desc=方法体中未引用的私有方法和构造函数的参数。名称以ignored或开头的参数unused被过滤掉。

java.best.practices.UnusedLocalVariableRule.rule.msg=未使用的局部变量
java.best.practices.UnusedLocalVariableRule.violation.msg=避免存在未使用的局部变量''%s''
java.best.practices.UnusedLocalVariableRule.rule.desc=声明和/或分配的局部变量但未使用，名称以ignored或unused开头的变量会被过滤掉。

java.best.practices.UnusedPrivateFieldRule.rule.msg=未使用的私有字段
java.best.practices.UnusedPrivateFieldRule.violation.msg=避免存在未使用的私有字段''%s''
java.best.practices.UnusedPrivateFieldRule.rule.desc=声明的私有字段和/或为其赋值但未使用。

java.best.practices.UnusedPrivateMethodRule.rule.msg=未使用的私有方法
java.best.practices.UnusedPrivateMethodRule.violation.msg=避免免存在未使用的私有方法''%s''
java.best.practices.UnusedPrivateMethodRule.rule.desc=声明了私有方法但未使用。

java.best.practices.UseCollectionIsEmptyRule.rule.msg=Collection使用isEmpty来判空
java.best.practices.UseCollectionIsEmptyRule.violation.msg=(size() == 0 or size() != 0 or size() < 0 or size() > 1)\
  建议使用isEmpty来判空
java.best.practices.UseCollectionIsEmptyRule.rule.desc=java.util.Collection上的isEmpty()方法用于确定集合是否包含任何元\
  素。将size()的值与0进行比较并不能像isEmpty()那样传达意图。

java.best.practices.UseStandardCharsetsRule.rule.msg=使用StandardCharsets
java.best.practices.UseStandardCharsetsRule.violation.msg=建议使用StandardCharsets
java.best.practices.UseStandardCharsetsRule.rule.desc=StandardCharsets 提供常见Charset对象的常量，例如UTF-8。\
  Charset.forName(...)与不需要扫描内部缓存相比，使用常量更不容易出错，并且可以提供较小的性能优势Charset。

java.best.practices.UseTryWithResourcesRule.rule.msg=使用try-with-resources语句
java.best.practices.UseTryWithResourcesRule.violation.msg=建议使用try-with-resources语句
java.best.practices.UseTryWithResourcesRule.rule.desc=try-with-resources 语句。该语句确保每个资源在语句结束时关闭。\
  它避免了在finally块中显式关闭资源的需要。此外，可以更好地处理异常：如果异常同时发生在try块和finally块中，则来自try块的异常将被抑制。\
  使用try-with-resources 语句，会保留从try块抛出的异常。

java.code.style.ClassNamingConventionsRule.rule.msg=类命名约定
java.code.style.ClassNamingConventionsRule.violation.msg=%s的命名''%s''不符合约定''%s''
java.code.style.ClassNamingConventionsRule.rule.desc=类名使用UpperCamelCase风格，必须遵从驼峰形式\
  (但以下情形例外：领域模型的相关命名DO / BO / DTO / VO / DAO)，抽象类必须以Abstract或Base开头,单元测试类必须以Test开头或Test/Tests/TestCase结尾。

java.code.style.EmptyControlStatementRule.rule.msg=Empty Control Statement
java.code.style.EmptyControlStatementRule.finally.violation.msg=Empty finally clause
java.code.style.EmptyControlStatementRule.synchronized.violation.msg=Empty synchronized statement
java.code.style.EmptyControlStatementRule.switch.violation.msg=Empty switch statement
java.code.style.EmptyControlStatementRule.block.violation.msg=Empty block
java.code.style.EmptyControlStatementRule.if.violation.msg=Empty if statement
java.code.style.EmptyControlStatementRule.else.violation.msg=Empty else statement
java.code.style.EmptyControlStatementRule.while.violation.msg=Empty while statement
java.code.style.EmptyControlStatementRule.for.violation.msg=Empty for statement
java.code.style.EmptyControlStatementRule.do.violation.msg=Empty do..while statement
java.code.style.EmptyControlStatementRule.initializer.violation.msg=Empty initializer statement
java.code.style.EmptyControlStatementRule.try.violation.msg=Empty try body
java.code.style.EmptyControlStatementRule.rule.desc=control statements whose body is empty, as well as empty initializers.

java.code.style.EmptyMethodInAbstractClassShouldBeAbstractRule.rule.msg=抽象类中的空方法建议添加abstract关键字
java.code.style.EmptyMethodInAbstractClassShouldBeAbstractRule.violation.msg=抽象类中的空方法建议添加abstract关键字
java.code.style.EmptyMethodInAbstractClassShouldBeAbstractRule.rule.desc=抽象类中的空或自动生成的方法应标记为抽象。这有助于\
  消除应该在具体子类中实现自己的版本的开发人员的不当使用

java.code.style.FieldNamingConventionsRule.rule.msg=Field Naming Conventions
java.code.style.FieldNamingConventionsRule.violation.msg=The %s name ''%s'' doesn''t match ''%s''
java.code.style.FieldNamingConventionsRule.rule.desc=field naming convention ALL_UPPER.

java.code.style.FormalParameterNamingConventionsRule.rule.msg=Formal Parameter Naming Conventions
java.code.style.FormalParameterNamingConventionsRule.violation.msg=The %s name ''%s'' doesn''t match ''%s''
java.code.style.FormalParameterNamingConventionsRule.rule.desc=formal parameter convention CamelCase style.

java.code.style.LinguisticNamingRule.rule.msg=Linguistic Naming
java.code.style.LinguisticNamingRule.TransformMethods.violation.msg=Linguistics Antipattern - The transform method \
  ''%s'' should not return void linguistically
java.code.style.LinguisticNamingRule.Getters.violation.msg=Linguistics Antipattern - The getter ''%s'' should not \
  return void linguistically
java.code.style.LinguisticNamingRule.Setters.violation.msg=Linguistics Antipattern - The setter ''%s'' should not \
  return any type except void linguistically
java.code.style.LinguisticNamingRule.BooleanMethods.violation.msg=Linguistics Antipattern - The method ''%s'' \
  indicates linguistically it returns a boolean, but it returns ''%s''
java.code.style.LinguisticNamingRule.Field.violation.msg=Linguistics Antipattern - The field ''%s'' indicates \
  linguistically it is a boolean, but it is ''%s''
java.code.style.LinguisticNamingRule.Variable.violation.msg=Linguistics Antipattern - The variable ''%s'' indicates \
  linguistically it is a boolean, but it is ''%s''
java.code.style.LinguisticNamingRule.rule.desc=This rule finds Linguistic Naming Antipatterns. It checks for fields, \
  that are named, as if they should be boolean but have a different type. It also checks for methods, that according \
  to their name, should return a boolean, but don’t. Further, it checks, that getters return something and setters won’t. 

java.code.style.LocalVariableCouldBeFinalRule.rule.msg=Local Variable Could Be Final
java.code.style.LocalVariableCouldBeFinalRule.violation.msg=Local variable ''%s'' could be declared final
java.code.style.LocalVariableCouldBeFinalRule.rule.desc=A local variable assigned only once can be declared final.

java.code.style.LocalVariableNamingConventionsRule.rule.msg=Local Variable Naming Conventions
java.code.style.LocalVariableNamingConventionsRule.violation.msg=The %s name ''%s'' doesn''t match ''%s''
java.code.style.LocalVariableNamingConventionsRule.rule.desc=By default local variable uses the standard Java naming \
  convention (Camel case).

java.code.style.LongVariableRule.rule.msg=长变量约定
java.code.style.LongVariableRule.violation.msg=避免字段、参数和局部变量''%s''名称的长度超过30。
java.code.style.LongVariableRule.rule.desc=太长的字段、参数或局部变量名称可能会使代码难以理解。


java.code.style.MethodNamingConventionsRule.rule.msg=Method Naming Conventions
java.code.style.MethodNamingConventionsRule.violation.msg=The %s name ''%s'' doesn''t match ''%s''
java.code.style.MethodNamingConventionsRule.rule.desc=By default method uses the standard Java naming convention \
  (Camel case).

java.code.style.PackageCaseRule.rule.msg=包命名规范
java.code.style.PackageCaseRule.violation.msg=包名''%s''含有大写的字母
java.code.style.PackageCaseRule.rule.desc=包命名必须需要全小写字母

java.code.style.PrematureDeclarationRule.rule.msg=过早定义变量
java.code.style.PrematureDeclarationRule.violation.msg=变量''%s''过早被定义
java.code.style.PrematureDeclarationRule.rule.desc=变量是在不使用该变量但也能够返回或引发异常的代码块之前创建的，则该变量被认为是过早定义的。

java.code.style.UnnecessaryCastRule.rule.msg=不必要的强制转换
java.code.style.UnnecessaryCastRule.violation.msg=避免不必要的强制转换''%s''
java.code.style.UnnecessaryCastRule.rule.desc=访问集合元素时不需要强制转换

java.code.style.UnnecessaryLocalBeforeReturnRule.rule.msg=避免创建不必要的局部变量
java.code.style.UnnecessaryLocalBeforeReturnRule.violation.msg=避免创建不必要的局部变量''%s''
java.code.style.UnnecessaryLocalBeforeReturnRule.rule.desc=避免创建不必要的局部变量

java.design.AvoidThrowingNullPointerExceptionRule.rule.msg=避免抛出NullPointerException
java.design.AvoidThrowingNullPointerExceptionRule.violation.msg=避免抛出NullPointerException
java.design.AvoidThrowingNullPointerExceptionRule.rule.desc=避免手动抛出 NullPointerException。这些很令人困惑，因为大多数人\
  会认为是虚拟机抛出的。为了避免使用null参数调用方法，您可以考虑使用IllegalArgumentException来代替，使其清楚地被视为程序员启动的异常。

java.design.CognitiveComplexityRule.rule.msg=Cognitive Complexity
java.design.CognitiveComplexityRule.Method.violation.msg=The method ''%s'' has a cognitive complexity of %s, current \
  threshold is %s
java.design.CognitiveComplexityRule.Constructor.violation.msg=The constructor ''%s'' has a cognitive complexity of \
  %s, current threshold is %s
java.design.CognitiveComplexityRule.rule.desc=Methods that are highly complex are difficult to read and more costly \
  to maintain. If you include too much decisional logic within a single method, you make its behavior hard to \
  understand and more difficult to modify.Information about Cognitive complexity can be found in the original \
  paper here: https://www.sonarsource.com/docs/CognitiveComplexity.pdf

java.design.CouplingBetweenObjectsRule.rule.msg=对象的耦合度较高
java.design.CouplingBetweenObjectsRule.violation.msg=对象的耦合度较高，当前的耦合度为%s，超过阀值%s。
java.design.CouplingBetweenObjectsRule.rule.desc=计算对象中唯一属性、局部变量和返回类型的数量。高于指定阈值表明耦合程度较高。

java.design.ImmutableFieldRule.rule.msg=Immutable Field
java.design.ImmutableFieldRule.violation.msg=Private field ''%s'' could be made final; it is only initialized \
  in the declaration or constructor.
java.design.ImmutableFieldRule.rule.desc=Identifies private fields whose values never change once object initialization \
  ends either in the declaration of the field or by a constructor. This helps in converting existing classes to becoming \
  immutable ones. Note that this rule does not enforce referenced object to be immutable itself. A class can still be \
  mutable, even if all its member fields are declared final. This is referred to as shallow immutability. For more \
  information on mutability, see Effective Java, 3rd Edition, Item 17: Minimize mutability.

java.design.NcssCountRule.rule.msg=Ncss Count
java.design.NcssCountRule.Class.violation.msg=The %s ''%s'' has a NCSS line count of %s (Highest = %s),Exceeded the \
  threshold of %s.
java.design.NcssCountRule.Method.violation.msg=The method ''%s'' has a NCSS line count of %s,Exceeded the \
  threshold of %s.
java.design.NcssCountRule.Constructor.violation.msg=The constructor ''%s'' has a NCSS line count of %s,Exceeded the \
  threshold of %s.
java.design.NcssCountRule.rule.desc=This rule uses the NCSS (Non-Commenting Source Statements) metric to determine \
  the number of lines of code in a class, method or constructor. If the number of lines of code of a class, \
  method or constructor exceeds the specified threshold, it is generally considered that the class, \
  method or constructor needs to be refactored to make the logic of the code clearer and more reasonable.\
  NCSS ignores comments, blank lines, and only counts actual statements. For more details on the calculation, \
  see the documentation of the：https://docs.pmd-code.org/pmd-doc-6.55.0/pmd_java_metrics_index\
  .html#non-commenting-source-statements-ncss

java.design.NPathComplexityRule.rule.msg=NPath Complexity
java.design.NPathComplexityRule.Method.violation.msg=The method ''%s'' has an NPath complexity of %s, current \
  threshold is %s.
java.design.NPathComplexityRule.Constructor.violation.msg=The constructor ''%s'' has an NPath complexity of %s, current \
  threshold is %s.
java.design.NPathComplexityRule.rule.desc=The NPath complexity of a method is the number of acyclic \
  execution paths through that method. NPath counts the number of full paths from the beginning to the end of the \
  block of the method. That metric grows exponentially, as it multiplies the complexity of statements in the same block.\
   For more details on the calculation, see the documentation of the：\
  https://docs.pmd-code.org/pmd-doc-6.55.0/pmd_java_metrics_index.html#npath-complexity-npath

java.design.SingularFieldRule.rule.msg=Singular Field
java.design.SingularFieldRule.violation.msg=Perhaps ''%s'' could be replaced by a local variable.
java.design.SingularFieldRule.rule.desc=Fields whose scopes are limited to just single methods do not rely on the \
  containing object to provide them to other methods. They may be better implemented as local variables within those \
  methods.

java.design.SwitchDensityRule.rule.msg=switch语句密度
java.design.SwitchDensityRule.violation.msg=switch语句中case标签包含的语句比例较高，考虑重构。
java.design.SwitchDensityRule.rule.desc=switch语句中case标签包含的语句比例较高意味着switch语句超载。考虑将语句移至新方法或基于switch变量创建子类。

java.design.TooManyFieldsRule.rule.msg=字段过多
java.design.TooManyFieldsRule.violation.msg=类中包含的字段过多，当前阀值%s。
java.design.TooManyFieldsRule.rule.desc=具有太多字段的类可能会变得难以使用，可以考虑重新设计以具有更少的字段，可以通过将相关字段分组到新对象中来实现。

java.design.TooManyMethodsRule.rule.msg=方法太多
java.design.TooManyMethodsRule.violation.msg=这个类的方法太多，考虑重构。
java.design.TooManyMethodsRule.rule.desc=具有太多方法的类可能需要重构，以降低其复杂性并找到一种拥有更细粒度对象的方法。

java.design.UselessOverridingMethodRule.rule.msg=无用的重写方法
java.design.UselessOverridingMethodRule.violation.msg=Overriding方法仅调用了超类中定义的相同方法。
java.design.UselessOverridingMethodRule.rule.desc=重写方法仅调用超类中定义的相同方法。

java.design.UseObjectForClearerAPIRule.rule.msg=使用容器对象可以使API更清晰
java.design.UseObjectForClearerAPIRule.violation.msg=不要使用大量字符串参数，而是考虑使用这些值的容器对象。
java.design.UseObjectForClearerAPIRule.rule.desc=当您编写公共方法时，您应该从 API 的角度进行思考。如果您的方法是公共的，\
  则意味着其他类将使用它，因此，您希望（或需要）提供全面且不断发展的 API。如果您将大量信息作为一系列简单的字符串传递，您可能会考虑使用\
  对象来表示所有这些信息。您将获得一个更简单的API，而不是一系列繁琐的字符，更重要的是如果您在某些时候需要传递额外的数据，您将能够通过\
  简单地修改或扩展API来实现，而无需对API进行任何修改。

java.documentation.CommentContentRule.rule.msg=注释内容
java.documentation.CommentContentRule.violation.msg=不要在注释中包含带有歧视性的语言。
java.documentation.CommentContentRule.rule.desc=不要在注释中包含带有歧视性的语言。

java.documentation.CommentRequiredRule.rule.msg=注释必填
java.documentation.CommentRequiredRule.violation.msg=需要包含''%s''注释
java.documentation.CommentRequiredRule.rule.desc=public、protected方法及类、字段、枚举需要包含注释

java.performance.ConsecutiveLiteralAppendsRule.rule.msg=Consecutive Literal Appends
java.performance.ConsecutiveLiteralAppendsRule.violation.msg=StringBuffer (or StringBuilder).append is called %s \
  consecutive times with literals. Use a single append with a single combined String.
java.performance.ConsecutiveLiteralAppendsRule.rule.desc=Consecutively calling StringBuffer/StringBuilder.append(...) \
  with literals should be avoided.Since the literals are constants, they can already be combined into a single String \
  literal and this String can be appended in a single method call.

java.performance.InefficientStringBufferingRule.rule.msg=Inefficient String Buffering
java.performance.InefficientStringBufferingRule.violation.msg=Avoid concatenating nonliterals in a StringBuffer/StringBuilder constructor or append().
java.performance.InefficientStringBufferingRule.rule.desc=Avoid concatenating non-literals in a StringBuffer \
  constructor or append() since intermediate buffers will need to be be created and destroyed by the JVM.

java.performance.InsufficientStringBufferDeclarationRule.rule.msg=Insufficient StringBuffer Declaration
java.performance.InsufficientStringBufferDeclarationRule.violation.msg=%s has been initialized with size %s, but has \
  at least %s characters appended.
java.performance.InsufficientStringBufferDeclarationRule.rule.desc=Failing to pre-size a StringBuffer or \
  StringBuilder properly could cause it to re-size many times during runtime. An empty StringBuffer/StringBuilder \
  constructor initializes the object to 16 characters. This default is assumed if the length of the constructor can \
  not be determined.

java.performance.OptimizableToArrayCallRule.rule.msg=Optimizable To Array Call
java.performance.OptimizableToArrayCallRule.violation.msg=This call to Collection.toArray() may be optimizable
java.performance.OptimizableToArrayCallRule.rule.desc=Calls to a collection's `toArray(E[])` method should specify \
  a target array of zero size. This allows the JVM to optimize the memory allocation and copying as much as possible.

java.performance.RedundantFieldInitializerRule.rule.msg=Redundant Field Initializer
java.performance.RedundantFieldInitializerRule.violation.msg=Avoid using redundant field initializer for ''%s''
java.performance.RedundantFieldInitializerRule.rule.desc=Java will initialize fields with known default values so any \
  explicit initialization of those same defaults is redundant and results in a larger class file (approximately three\
   additional bytecode instructions per field).

java.best.practices.UnusedAssignmentRule.rule.msg=Unused Assignment
java.best.practices.UnusedAssignmentRule.violation.msg=The value assigned to this variable ''%s'' is never used or \
  always overwritten
java.best.practices.UnusedAssignmentRule.rule.desc=The variable is never read after the assignment, or The assigned \
  value is always overwritten by other assignments before the next read of the variable.The rule doesn't consider \
  assignments to fields except for those of `this` in a constructor,or static fields of the current class in static \
  initializers.

java.design.ExcessiveParameterListRule.rule.msg=参数过多
java.design.ExcessiveParameterListRule.violation.msg=避免方法中包含过多的参数，当前阀值10。
java.design.ExcessiveParameterListRule.rule.desc=具有大量参数的方法是维护的一个挑战，特别是如果它们中的大多数共享相同的数据类型。\
  这些情况通常表示需要新对象来包装众多参数。

java.design.ExcessivePublicCountRule.rule.msg=Public属性/方法过多
java.design.ExcessivePublicCountRule.violation.msg=类的public属性或方法太多。当前阀值45。
java.design.ExcessivePublicCountRule.rule.desc=具有大量公共方法和属性的类需要不成比例的测试工作，因为组合副作用会迅速增长并增加风\
  险。将这些类重构为更小的类不仅可以提高可测试性和可靠性

java.code.style.UnnecessaryConstructorRule.rule.msg=Unnecessary Constructor
java.code.style.UnnecessaryConstructorRule.violation.msg=避免不必要的构造函数，编译器将为您生成这些构造函数。
java.code.style.UnnecessaryConstructorRule.rule.desc=This rule detects when a constructor is not necessary; i.e., \
  when there is only one constructor and the constructor is identical to the default constructor. The default \
  constructor should has same access modifier as the declaring class.

java.code.style.UnnecessaryModifierRule.rule.msg=Unnecessary Modifier
java.code.style.UnnecessaryModifierRule.violation.msg=Unnecessary modifier ''%s'' on %s ''%s''
java.code.style.UnnecessaryModifierRule.rule.desc=Fields in interfaces and annotations are automatically \
  `public static final`, and methods are `public abstract`. Classes, interfaces or annotations nested in an interface \
  or annotation are automatically `public static`(all nested interfaces and annotations are automatically static). \
  Nested enums are automatically `static`.For historical reasons, modifiers which are implied by the context are \
  accepted by the compiler, but are superfluous.

java.errorprone.AssignmentInOperandRule.rule.msg=擦作数赋值
java.errorprone.AssignmentInOperandRule.violation.msg=避免在操作数中赋值。
java.errorprone.AssignmentInOperandRule.rule.desc=避免在操作数中赋值，这会使代码更加复杂且难以阅读。

java.errorprone.AssignmentToNonFinalStaticRule.rule.msg=给不是final的static字段赋值
java.errorprone.AssignmentToNonFinalStaticRule.violation.msg=对构造函数中的不是final的static字段''%s''可能存在不安全的赋值。
java.errorprone.AssignmentToNonFinalStaticRule.rule.desc=识别static资源不安全的使用

java.errorprone.AvoidDecimalLiteralsInBigDecimalConstructorRule.rule.msg=避免使用float/double创建BigDecimal
java.errorprone.AvoidDecimalLiteralsInBigDecimalConstructorRule.violation.msg=避免创建BigDecimal使用float/double,建议使用String
java.errorprone.AvoidDecimalLiteralsInBigDecimalConstructorRule.rule.desc=一般会认为“new BigDecimal(0.1)”的结果恰好等于\
  0.1，但它实际上等于0.1000000000000000055511151231257827021181583404541015625。这是因为0.1不能精确地表示为双精度型（或任何有限长度的二进制分数）。

java.errorprone.AvoidDuplicateLiteralsRule.rule.msg=Avoid Duplicate Literals
java.errorprone.AvoidDuplicateLiteralsRule.violation.msg=The String literal %s appears %s times in this file; the \
  first occurrence is on line %s
java.errorprone.AvoidDuplicateLiteralsRule.rule.desc=Code containing duplicate String literals can usually be \
  improved by declaring the String as a constant field.

java.errorprone.AvoidFieldNameMatchingMethodNameRule.rule.msg=Avoid Field Name Matching Method Name
java.errorprone.AvoidFieldNameMatchingMethodNameRule.violation.msg=Field ''%s'' has the same name as a method
java.errorprone.AvoidFieldNameMatchingMethodNameRule.rule.desc=It can be confusing to have a field name with the same\
   name as a method. While this is permitted.

java.errorprone.AvoidFieldNameMatchingTypeNameRule.rule.msg=Avoid Field Name Matching Type Name
java.errorprone.AvoidFieldNameMatchingTypeNameRule.violation.msg=It is somewhat confusing to have a field name \
  ''%s'' matching the declaring class name
java.errorprone.AvoidFieldNameMatchingTypeNameRule.rule.desc=It is somewhat confusing to have a field name matching \
  the declaring type name.

java.errorprone.AvoidInstanceofChecksInCatchClauseRule.rule.msg=Avoid Instance of Checks In Catch Clause
java.errorprone.AvoidInstanceofChecksInCatchClauseRule.violation.msg=Each caught exception type should be handled in its own catch clause.
java.errorprone.AvoidInstanceofChecksInCatchClauseRule.rule.desc=Each caught exception type should be handled in its own catch clause.

java.errorprone.NonSerializableClassRule.rule.msg=Non Serializable Class
java.errorprone.NonSerializableClassRule.violation.msg=The field ''%s'' of serializable class ''%s'' is of \
  non-serializable type ''%s''.
java.errorprone.NonSerializableClassRule.field.violation.msg=The field ''%s'' should be private static final with \
  type ''%s''.
java.errorprone.NonSerializableClassRule.rule.desc=If a class is marked as `Serializable`, then all fields need to \
  be serializable as well. In order to exclude a field, it can be marked as transient. Static fields are not considered.

java.errorprone.OverrideBothEqualsAndHashcodeRule.rule.msg=Override Both Equals And Hashcode
java.errorprone.OverrideBothEqualsAndHashcodeRule.violation.msg=Ensure you override both equals() and hashCode().
java.errorprone.OverrideBothEqualsAndHashcodeRule.rule.desc=Override both public boolean Object.equals(Object other), \
  and public int Object.hashCode(), or override neither.  Even if you are inheriting a hashCode() from a parent class, \
  consider implementing hashCode and explicitly delegating to your superclass.

java.errorprone.ProperLoggerRule.rule.msg=Proper Logger
java.errorprone.ProperLoggerRule.violation.msg=Logger should be defined private static final and have the correct class.
java.errorprone.ProperLoggerRule.rule.desc=A logger should normally be defined private static final and be associated \
  with the correct class.''private final Log log;'' is also allowed for rare cases where loggers need to be passed \
  around,with the restriction that the logger needs to be passed into the constructor.

java.errorprone.ReturnEmptyCollectionRatherThanNullRule.rule.msg=Return Empty Collection Rather Than Null
java.errorprone.ReturnEmptyCollectionRatherThanNullRule.violation.msg=Return an empty collection rather than ''null''.
java.errorprone.ReturnEmptyCollectionRatherThanNullRule.rule.desc=For any method that returns an collection \
  (such as an array, Collection or Map), it is better to return an empty one rather than a null reference. This \
  removes the need for null checking all results and avoids inadvertent NullPointerExceptions.

java.errorprone.ReturnFromFinallyBlockRule.rule.msg=Return From Finally Block
java.errorprone.ReturnFromFinallyBlockRule.violation.msg==Avoid returning from a finally block.
java.errorprone.ReturnFromFinallyBlockRule.rule.desc=Avoid returning from a finally block, this can discard exceptions.

java.errorprone.UnconditionalIfStatementRule.rule.msg=Unconditional If Statement
java.errorprone.UnconditionalIfStatementRule.violation.msg=Do not use ''if'' statements that are always true or always\
   false
java.errorprone.UnconditionalIfStatementRule.rule.desc=Do not use ''if'' statements that are always true or always\
   false

java.customization.UndefinedMagicConstantRule.rule.msg=Undefined Magic Constant
java.customization.UndefinedMagicConstantRule.violation.msg=避免魔法值''%s''.
java.customization.UndefinedMagicConstantRule.rule.desc=Any magic constant (i.e. undefined constants) are not allowed to \
  appear directly in the code.