<?xml version="1.0" encoding="UTF-8"?>
<test-data
        xmlns="http://pmd.sourceforge.net/rule-tests"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://pmd.sourceforge.net/rule-tests http://pmd.sourceforge.net/rule-tests_1_0_0.xsd">

    <test-code>
    <description>stream expression correct</description>
    <expected-problems>0</expected-problems>
    <code><![CDATA[
    public class Foo {
        public void foo(Stream<String> inputList) {
            List<String> stringList = new ArrayList();
            stringList.add("1");
            ModelClass modelClass = new ModelClass();
            modelClass.setTitle("title");
            modelClass.setContent("content");
            InnerClass innerClass = new InnerClass();
            innerClass.setStream(stringList.stream());
            innerClass.setStringList(stringList);
            modelClass.setInnerClass(innerClass);

            // normal stream
            List<String> filterList = stringList.stream()
                .filter(Objects::nonNull)
                .filter(x -> Objects.equals("1", x))
                .collect(Collectors.toList());
            filterList = stringList
                .stream()
                .filter(Objects::nonNull)
                .filter(x -> Objects.equals("1", x))
                .collect(Collectors.toList());


            // local stream
            Stream<String> list = stringList.stream();
            List<String> filterList2 = list.filter(Objects::nonNull)
            .filter(x -> Objects.equals("1", x))
            .collect(Collectors.toList());
            filterList2 = list
            .filter(Objects::nonNull)
            .filter(x -> Objects.equals("1", x))
            .collect(Collectors.toList());

            // method stream
            Foo2 foo2 = new Foo2();
            List<String> filterList3 = foo2.getStreamList()
            .filter(Objects::nonNull)
            .filter(x -> Objects.equals("1", x))
            .collect(Collectors.toList());
            filterList3 = foo2
            .getStreamList()
            .filter(Objects::nonNull)
            .filter(x -> Objects.equals("1", x))
            .collect(Collectors.toList());


            // param stream
            List<String> filterList4 = inputList.filter(Objects::nonNull)
            .filter(x -> Objects.equals("1", x))
            .collect(Collectors.toList());
            filterList4 = inputList
            .filter(Objects::nonNull)
            .filter(x -> Objects.equals("1", x))
            .collect(Collectors.toList());


            // model stream
            List<String> filterList5 = modelClass.getInnerClass().getStringList().stream()
            .filter(Objects::nonNull)
            .filter(x -> Objects.equals("1", x))
            .collect(Collectors.toList());
            filterList5 = modelClass.getInnerClass().getStringList()
            .stream()
            .filter(Objects::nonNull)
            .filter(x -> Objects.equals("1", x))
            .collect(Collectors.toList());

            List<String> filterList6 = modelClass.getInnerClass().getStream()
            .filter(Objects::nonNull)
            .filter(x -> Objects.equals("1", x))
            .collect(Collectors.toList());
            filterList6 = modelClass.getInnerClass()
            .getStream()
            .filter(Objects::nonNull)
            .filter(x -> Objects.equals("1", x))
            .collect(Collectors.toList());
        }
    }

    public class Foo2 {
        public Stream<String> getStreamList(){
            List<String> stringList = new ArrayList();
            stringList.add("1");
            return stringList.stream();
        }
    }

    public class ModelClass {
        private String title;
        private String content;
        private InnerClass innerClass;
        public String getTitle() {
            return title;
        }

        public void setTitle(String title) {
            this.title = title;
        }

        public String getContent() {
            return content;
        }

        public void setContent(String content) {
            this.content = content;
        }

        public InnerClass getInnerClass() {
            return innerClass;
        }

        public void setInnerClass(InnerClass innerClass) {
            this.innerClass = innerClass;
        }

    }
    public class InnerClass {
        private Stream<String> stream;
        private List<String> stringList;

        public List<String> getStringList() {
            return stringList;
        }

        public void setStringList(List<String> stringList) {
            this.stringList = stringList;
        }

        public Stream<String> getStream() {
            return stream;
        }

        public void setStream(Stream<String> stream) {
            this.stream = stream;
        }
    }
    ]]></code>
    </test-code>

    <test-code>
    <description>stream expression incorrect</description>
    <expected-problems>4</expected-problems>
    <code><![CDATA[
    public class Foo {
        public void foo(Stream<String> inputList) {
            List<String> stringList = new ArrayList();
            stringList.add("1");

            // normal stream
            List<String> filterList = stringList.stream()
                .filter(Objects::nonNull)
                .filter(x ->
                    Objects.equals("1", x)).filter(x -> Objects.equals("2", x))
                .collect(Collectors.toList());

            // local stream
            Stream<String> list = stringList.stream();
            List<String> filterList2 = list.filter(Objects::nonNull).filter(x -> Objects.equals("1", x))
                .collect(Collectors.toList());

            // method stream
            Foo2 foo2 = new Foo2();
            List<String> filterList3 = foo2.getStreamList().filter(Objects::nonNull)
                .filter(x -> Objects.equals("1", x))
                .collect(Collectors.toList());

            // param stream
            List<String> filterList4 = inputList.filter(Objects::nonNull)
                .filter(x -> Objects.equals("1", x)).collect(Collectors.toList());

        }
    }

    public class Foo2 {
        public Stream<String> getStreamList(){
            List<String> stringList = new ArrayList();
            stringList.add("1");
            return stringList.stream();
        }
    }
    ]]></code>
    </test-code>

    <test-code>
    <description>Optional expression correct</description>
    <expected-problems>0</expected-problems>
    <code><![CDATA[
    public class Foo {
        public void foo(Optional<ModelClass> inputOptional) {
            List<String> stringList = new ArrayList();
            stringList.add("1");
            ModelClass modelClass = new ModelClass();
            modelClass.setTitle("title");
            modelClass.setContent("content");
            InnerClass innerClass = new InnerClass();
            innerClass.setStream(stringList.stream());
            innerClass.setStringList(stringList);
            modelClass.setInnerClass(innerClass);

            // normal optional
            String newValue = Optional.ofNullable(modelClass)
                .map(ModelClass::getTitle)
                .orElse("");
            newValue = Optional
                .ofNullable(modelClass)
                .map(ModelClass::getTitle)
                .orElse("");

            // local optional
            Optional<ModelClass> optionModel = Optional.ofNullable(modelClass);
            String newValue2 = optionModel
                .map(ModelClass::getTitle)
                .orElse("");
            newValue2 = optionModel.map(ModelClass::getTitle)
                .orElse("");
            newValue2 = optionModel.isPresent() ? optionList.get().getTitle() : "";

            // method optional
            Foo2 foo2 = new Foo2();
            String newValue3 = foo2.getOptional()
                .map(ModelClass::getTitle)
                .orElse("");

            // param optional
            String newValue4 = inputOptional
                .map(ModelClass::getTitle)
                .orElse("");
            newValue4 = inputOptional.map(ModelClass::getTitle)
                .orElse("");

        }
    }

    public class Foo2 {
        public Optional<ModelClass> getOptional(){
            ModelClass modelClass = new ModelClass();
            modelClass.setTitle("title");
            modelClass.setContent("content");
            return Optional.ofNullable(modelClass);
        }
    }


    public class ModelClass {
        private String title;
        private String content;
        private InnerClass innerClass;

        public InnerClass getInnerClass() {
            return innerClass;
        }

        public void setInnerClass(InnerClass innerClass) {
            this.innerClass = innerClass;
        }

        public String getTitle() {
            return title;
        }

        public void setTitle(String title) {
            this.title = title;
        }

        public String getContent() {
            return content;
        }

        public void setContent(String content) {
            this.content = content;
        }
    }
    public class InnerClass{
        private Stream<String> stream;
        private List<String> stringList;

        public List<String> getStringList() {
            return stringList;
        }

        public void setStringList(List<String> stringList) {
            this.stringList = stringList;
        }
        public Stream<String> getStream() {
            return stream;
        }

        public void setStream(Stream<String> stream) {
            this.stream = stream;
        }
    }
    ]]></code>
    </test-code>




    <test-code>
    <description>mono expression correct</description>
    <expected-problems>0</expected-problems>
    <code><![CDATA[
    import reactor.core.publisher.Mono;
    public class Foo {
        public void foo(Mono<String> monoInfo) {
            Mono<Boolean> mono = getMonoInfo()
                    .map(wrapper -> Objects.equals("test", wrapper));
            mono = getMonoInfo().map(wrapper -> Objects.equals("test", wrapper));
            mono = monoInfo.map(wrapper -> Objects.equals("test", wrapper));
            mono = monoInfo
                .map(wrapper -> Objects.equals("test", wrapper));

            String firstValue = Mono.just(new ArrayList<String>())
                    .flatMap(this::getMonoListInfo)
                    .map(x -> x.get(0))
                    .block();

            Mono<List<String>> monoList = Mono.zip(getMonoList(), this::getList);

        }

        private List<String> getList(Object[] objects) {
            return Arrays.stream(objects)
                .flatMap(this::getStreamList)
                .collect(Collectors.toList());
        }

        private Stream<String> getStreamList(Object x) {
            return ((List<String>) x).stream();
        }


        private Mono<String> getMonoInfo() {
            return Mono.just("test");
        }

        private List<Mono<List<String>>> getMonoList() {
            return Lists.newArrayList(Mono.just(Lists.newArrayList("test")),
                    Mono.just(Lists.newArrayList("test2")),
                    Mono.just(Lists.newArrayList("test3")));
        }

        private Mono<List<String>> getMonoListInfo(List<String> inputList) {
            if (inputList.size() > 0) {
                return Mono.just(inputList);
            }
            return Mono.just(Lists.newArrayList("test"));
        }
    }
    ]]></code>
    </test-code>

    <test-code>
        <description>flux expression correct</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
    import reactor.core.publisher.Mono;
    import reactor.core.publisher.Flux;
    public class Foo {
        public void flux() {
            List<String> iterable = Arrays.asList("foo", "bar", "foobar");
            Mono<String> resultMono = Flux.fromIterable(iterable)
                .map(value -> {
                    if (Objects.equals("foo", value)) {
                        return Mono.just("success");
                    }
                    return Mono.just("failure");
                })
                .flatMapSequential(x -> x)
                .collectList()
                .flatMap(states -> {
                    if (states.contains("success")) {
                        return Mono.just("T");
                    }
                    return Mono.just("F");
                });


            Flux<String> alphabet = Flux.just(-1, 30, 13, 9, 20)
                .handle((i, sink) -> {
                    String letter = sink.toString();
                    if (letter != null) {
                        sink.next(letter);
                    }
                });
        }
    }
    ]]></code>
    </test-code>

    <test-code>
        <description>Collection Stream</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
    public class Foo {
        public void Foo() {
            List<InnerClass> innerClassList = new ArrayList();
            InnerClass innerClass = new InnerClass();
            innerClass.setExtensions(Lists.newArrayList("1"));
            boolean result = innerClassList.stream()
                    .filter(Objects::nonNull)
                    .map(InnerClass::getExtensions)
                    .flatMap(Collection::stream)
                    .anyMatch(x -> Objects.equals("1", x));
        }

        class InnerClass {
            private List<String> extensions;

            public List<String> getExtensions() {
                return extensions;
            }

            public void setExtensions(List<String> extensions) {
                this.extensions = extensions;
            }
        }
    }
    ]]></code>
    </test-code>

    <test-code>
        <description>ok Optional get is special no check</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo {
    public String bar() {
        String referenceID2 = Optional.ofNullable(travelInfo).get().getReferenceID();
        Optional<IDCardExtType> idCardExtType = travelInfo.getIdCardList()
                                                    .stream()
                                                    .findFirst();
        String referenceID = idCardExtType.get().getReferenceID();
    }
}]]></code>
    </test-code>
</test-data>