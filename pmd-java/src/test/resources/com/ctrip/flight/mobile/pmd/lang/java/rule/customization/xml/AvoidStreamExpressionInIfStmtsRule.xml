<?xml version="1.0" encoding="UTF-8"?>
<test-data
        xmlns="http://pmd.sourceforge.net/rule-tests"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://pmd.sourceforge.net/rule-tests http://pmd.sourceforge.net/rule-tests_1_0_0.xsd">

    <test-code>
        <description>bad method is stream</description>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
public class Foo {
    public void bar() {
        if(getStreamInfo().anyMatch(x -> Objects.equals("1", x))) {
            // bad
        }
    }

    private Stream<String> getStreamInfo() {
        List<String> stringList = new ArrayList<>();
        stringList.add("1");
        return stringList.stream();
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Bad, contain stream expression</description>
        <expected-problems>2</expected-problems>
        <code><![CDATA[
public class Foo {
    public void bar(String input, List<String> inputList) {
        if(Objects.nonNull(input) && !inputList.isEmpty()
            && inputList.stream().anyMatch(x -> Objects.equals("1", x))) {
            // contain stream expression
        } else if(Optional.ofNullable(input).orElse("").equals("test")) {
            // contain Optional expression
        }
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Bad, contain Optional expression</description>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
public class Foo {
    public void bar(String input, List<String> inputList) {
        if(!inputList.isEmpty()
            && Optional.ofNullable(input).orElse("").equals("test")) {
            // contain Optional expression
        }
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Ok</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo {
    public void bar(String input, List<String> inputList) {
        if(!inputList.isEmpty() && isTestValue(input)) {
            // ok
        }
    }

    private boolean isTestValue(String input) {
        return Optional.ofNullable(input).orElse("").equals("test");
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Ok</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo {

    private Mono<ResultWrapper<MultiFreightListSearchResponseType>> getIntlLoungeSingleBook(SearchXProductContext searchXProductContext,
                                                                                            MultiFreightListSearchResponseType multiResponse) {
        boolean queryXList = !searchXProductContext.isSingle()
            && BOOK_NEED_XLIST.stream()
                .anyMatch(xProductType -> searchXProductContext.getProductTypes().contains(xProductType.getValue()))
                && searchXProductContext.isBookXProducts();

        // special handler .getXProducts() and queryXList isn't stream expression
        if (queryXList && null != multiResponse.getResponseBody()
                    && multiResponse.getResponseBody().getXProducts() != null
                    && !CollectionUtils.isNullOrEmpty(multiResponse.getResponseBody().getXProducts())) {

        }
    }

    public Mono<SearchXProductResult> searchXProducts(SearchXProductContext searchXProductContext) {
    // searchXProducts is stream expression,but ModuleSwitchers.test's arguments contain this
    boolean isRecordMetrics = ModuleSwitchers.test("metrics.searchxproducts.switch", null, null);
    if (isRecordMetrics) {
        Optional.ofNullable(searchXProductContext.getProductTypes()).orElse(new ArrayList<>(0)).stream().distinct()
        .forEach(productType -> {
            Metrics.withTag("productType", String.valueOf(productType)).recordOne("searchXProductsReq");
        });
    }
}


    // getXProducts is stream expression
    private Mono<SearchXProductResult> getXProducts(SearchXProductContext searchXProductContext) {

    }
}
        ]]></code>
    </test-code>
</test-data>