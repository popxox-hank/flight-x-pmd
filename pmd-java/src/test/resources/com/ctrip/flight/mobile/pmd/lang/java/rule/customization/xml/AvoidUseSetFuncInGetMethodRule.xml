<?xml version="1.0" encoding="UTF-8"?>
<test-data
        xmlns="http://pmd.sourceforge.net/rule-tests"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://pmd.sourceforge.net/rule-tests http://pmd.sourceforge.net/rule-tests_1_0_0.xsd">

    <test-code>
        <description>failure in get method use set function</description>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
public class Foo {
    OrderInfoModel getOrderInfo() {
        doSomething();
        orderInfoModel.setName("name");
        orderInfoModel.setValue("value");
        if(isOk()){
            orderInfoModel.setCondition(true);
        }
    }
}
]]></code>
    </test-code>

    <test-code>
        <description>ok</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo {
    OrderInfoModel getOrderInfo() {
        doSomething();
        return buildOrderInfoModel();
    }

    private OrderInfoModel buildOrderInfoModel(){
        orderInfoModel.setName("name");
        orderInfoModel.setValue("value");
        if(isOk()){
            orderInfoModel.setCondition(true);
        }
        return orderInfoModel;
    }
}
]]></code>
    </test-code>

    <test-code>
        <description>ok contain set but not function</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo {
    String getFoo() {
        doSomething();
        setModel(value,result);
    }
}
]]></code>
    </test-code>

    <test-code>
        <description>failure stream contain set function</description>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
public class Foo {
    List<OrderInfoModel> getFoo() {
        doSomething();
        return list.stream()
                   .filter(Objects::nonNull)
                   .map(model->{
                        OrderInfoModel orderInfo = new OrderInfoModel();
                        orderInfo.setName(model.getName());
                        orderInfo.setValue(model.getValue());
                        return orderInfo;
                   })
                   .collect(Collectors.toList());
    }
}
]]></code>
    </test-code>

    <test-code>
        <description>failure</description>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
public class Foo {

    public void getEndPoint() {
        requestType.getHead().getMatch().setSyscode("");
    }
}
]]></code>
    </test-code>

    <test-code>
        <description>ok Test Class no check</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class TestFoo {

    public void getEndPoint() {
        requestType.getHead().getMatch().setSyscode("");
    }
}
]]></code>
    </test-code>

    <test-code>
        <description>ok</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class UserLevel {
    private String uid;

    public UserLevel() {
    }

    public String getUid() {
        return this.uid;
    }

    public void setUid(String uid) {
        this.uid = uid;
    }

    class InnerClass{
        public void foo(){
            List<PackageModel> packageList = getList().stream().map(x->{
                 PackageModel packageInfoModel = new PackageModel();
                 packageInfoModel.setTest("test");
                 return packageInfoModel;
            })
            .filter(Objects::nonNull)
            .collect(Collectors.toList());
        }
    }
}
]]></code>
    </test-code>
</test-data>